{"version":3,"sources":["button.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","state","active","deltaX","deltaY","circleRef","React","createRef","this","setState","e","clientX","clientY","current","getBoundingClientRect","x","y","console","log","className","ref","onClick","getClientPosition","bind","onAnimationEnd","hideCircle","style","left","top","value","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAiDeA,G,kBA7CZ,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,QAAQ,EACRC,OAAQ,EACRC,OAAQ,GAEZ,EAAKC,UAAYC,IAAMC,YAPR,E,0EAUfC,KAAKC,SAAS,CACVP,QAAQ,M,wCAGEQ,GAAG,IAEXC,EAAoBD,EAApBC,QAAQC,EAAYF,EAAZE,QAFG,EAIHJ,KAAKH,UAAUQ,QAAQC,wBAEjCX,EAASQ,EANI,EAIXI,EAEqB,EACvBX,EAASQ,EAPI,EAITI,EAGkB,EAC1BC,QAAQC,IAAIV,KAAKP,MAAME,QACvBK,KAAKC,SAAS,CACXP,QAAQ,EACRC,OAAQA,EACRC,OAAQA,IAEXa,QAAQC,IAAIV,KAAKP,MAAME,U,+BAGtB,OACI,yBAAKgB,UAAU,UACX,4BAAQC,IAAKZ,KAAKH,UAAWgB,QAASb,KAAKc,kBAAkBC,KAAKf,OAC7DA,KAAKP,MAAMC,OACR,0BAAMiB,UAAU,SACZK,eAAgBhB,KAAKiB,WAAWF,KAAKf,MACrCkB,MAAO,CAAEC,KAAMnB,KAAKP,MAAME,OAAQyB,IAAKpB,KAAKP,MAAMG,UAC5C,GACd,0BAAMe,UAAU,SAASX,KAAKR,MAAM6B,a,GAxCnCC,cCaNC,MAZf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,CAAQU,MAAM,aACd,kBAAC,EAAD,CAAQA,MAAM,aACd,4BAAQV,UAAU,cAAlB,6BCGca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.68550c4b.chunk.js","sourcesContent":["import React,{ Component } from 'react'\nimport {useState}  from 'react'\nimport './button.css'\nclass Button extends Component {\n   constructor(props) {\n       super(props)\n       this.state = {\n           active: false,\n           deltaX: 0,\n           deltaY: 0\n       }\n       this.circleRef = React.createRef();  \n   }\n   hideCircle() {\n       this.setState({\n           active: false\n       })\n   }\n   getClientPosition(e) {\n       //获取鼠标针对视口的距离\n       let { clientX,clientY } = e \n       //获取按钮针对视口的距离\n       let { x,y } = this.circleRef.current.getBoundingClientRect();\n       //差值就是鼠标相对于按钮button的距离 \n       let deltaX = clientX - x - 3;\n       let deltaY = clientY - y -3;\n       console.log(this.state.deltaX)\n       this.setState({\n          active: true,\n          deltaX: deltaX,\n          deltaY: deltaY\n       })\n       console.log(this.state.deltaX)\n    }\n    render() {\n        return (\n            <div className=\"button\">\n                <button ref={this.circleRef} onClick={this.getClientPosition.bind(this)}>\n                    {this.state.active ? \n                        <span className=\"circle\" \n                            onAnimationEnd={this.hideCircle.bind(this)}\n                            style={{ left: this.state.deltaX, top: this.state.deltaY}}>\n                        </span> : ''}\n                    <span className=\"value\">{this.props.value}</span>\n                </button>\n            </div> \n        )\n    }\n}\nexport default Button","import React from 'react';\nimport './App.css';\nimport Button from './button'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button value=\"click me\"></Button>\n      <Button value=\"click me\"></Button>\n      <header className=\"App-header\">\n        Try to click the button\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}